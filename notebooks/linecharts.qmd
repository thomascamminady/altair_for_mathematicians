---
title: Plotting 101
jupyter: python3
execute:
    enabled: true
---

We want to start simple and increase the complexity of our visualizations over time.
While there a lot of things to learn about `altair`, an equally important learning exercise has to do with understanding the way data should be represented.
We'll cover these topics as they occur. For now, let's start with a simple plot.

Before we get started, let's quickly cover one bit of code so that we don't need to worry about this again. We import the following packages at the start of every notebook.

```{python}
import scipy
import numpy as np
import pandas as pd
import altair as alt
import matplotlib.pyplot as plt

```
But in order to save some space, we will always hide this code cell like this.
```{python}
# | code-fold: true
# | code-summary: "Import packages."
import scipy
import numpy as np
import pandas as pd
import altair as alt
import matplotlib.pyplot as plt

```

## Plotting a simple function

With that being said, here's our first plot
```{python}
t = np.linspace(0, 20, 100)
y = np.sin(t)
df = pd.DataFrame(
    {
        "t": t,
        "y": y,
    }
)
alt.Chart(df).mark_line().encode(
    x="t",
    y="y",
)

```
This illustrates one step already: We always use `pandas` dataframes to plot our data and hence need to convert everything into the correct format. The plot itself the consists of three components
```{python}
# | eval: false
alt.Chart(df)
```
states that we want to create a chart using the data stored in `df`.

Next is the mark that we want to use for visualization
```{python}
# | eval: false
mark_line()
```
implies that we are using a line chart. We could have also used `mark_point` or `mark_bar` to create scatter or bar charts, respectively.

Last is the encoding of the data.
```{python}
# | eval: false
encode(
    x="t",
    y="y",
)
```
This states  what we are using as our plotting arguments.

### Styling our plot
A lot of customization is possible when us `altair`. Here's a modified version of the above plot.
```{python}
alt.Chart(df).mark_line(strokeWidth=5, color="blue").encode(
    x=alt.X("t:Q", scale=alt.Scale(domain=(-2, 22))),
    y=alt.Y("y:Q", title="Some title"),
).properties(
    width=600,
    height=200,
    title="My altair plot.",
).configure_axis(
    labelFontSize=10,
    titleFontSize=20,
    titleFontWeight="normal",
    labelAngle=45,
    titleAngle=-45,
    labelPadding=20,
).configure_title(
    fontSize=24,
    fontWeight="normal",
    color="blue",
)

```
We see a lot of things come together here. First, `.properties()` allows us to specify
properties of the plot such as width and height, but also the title.
Adding the `strokeWidth` or `color` to the `mark_line` method specifies properties of the mark for the full plot.
Using the syntax `x=alt.X(...)` is giving us more flexibility to specify properties than just writing `x="t"`.
Note that we wrote `t:Q` instead of `t`. The `Q` specifies that we are using a quantitative variable instead of a
nominal (`N`), ordinal (`O`), or temporal (`T`) variable. We don't need to specify this here because `altair` is able
to infer that we are plotting a quantitative variable. The `scale` parameter allows us to specify arguments related to the scale of the plot. The label of the y-axis is specified by the `title` argument inside `alt.Y`. The `configure_axis` and `configure_title` methods allow us to specify arguments relevant to the axis and title, respectively.

All of this is not pretty but gets the point across.

You can also choose a pre-defined [theme](https://github.com/vega/vega-themes/).

```{python}
alt.themes.enable("fivethirtyeight")
alt.Chart(df).mark_line().encode(
    x=alt.X("t:Q", scale=alt.Scale(domain=(-2, 22))),
    y=alt.Y("y:Q", title="Some title"),
)
```


## Plotting two functions

Let's go cracy and not just plot `sin` but also `cos`. In order to do so, we have to adapt our dataframe to represent this correctly:
```{python}
t = np.linspace(0, 20, 100)
y = np.sin(t)
y2 = np.cos(t)
df = pd.DataFrame(
    {
        "t": np.hstack([t, t]),
        "y": np.hstack([y, y2]),
        "function": ["sin"] * 100 + ["cos"] * 100,
    }
)
```
That is, we don't change the fact that our columns are called `t` and `y`. We do however need a new identifier that tells us which entries belong together. Now the power of `altair` is that we can plot this in a very simple way.
```{python}
alt.themes.enable("default")

alt.Chart(df).mark_line().encode(
    x="t",
    y="y",
    color="function",
)
```
All we have to do is specify an attribute that we want to `color` our plot by.
If we don't care about color, we can also just choose a `detail`.
```{python}
alt.Chart(df).mark_line().encode(
    x="t",
    y="y",
    detail="function",
)
```
Or we could have created a scatter plot with different shapes and colors.
```{python}
alt.Chart(df).mark_point(filled=True).encode(
    x="t",
    y="y",
    shape="function",
    color="function",
)
```

## Interactivity
It is easy to make our plot interactive. We can add a `tooltip` that displays information
when hovering over points and make the plot zoomable by adding `interactive()` to it.
```{python}
alt.Chart(df).mark_point(filled=True).encode(
    x="t",
    y="y",
    shape="function",
    color="function",
    tooltip=["t", "y", "function"],
).interactive()
```
